class FeedbackService:
    LIGHT_BLUE = '\033[94m'
    END_COLOR = '\033[0m'

    def blue_print(self, text):
        """Print text in light blue color."""
        print(f"{self.LIGHT_BLUE}{text}{self.END_COLOR}")

    def display_response(self, response: str, from_database: bool = False, 
                         is_identical: bool = False, original_question: str = "", 
                         attempt: int = 1):
        """
        Display a response with appropriate formatting and context.
        
        Args:
            response: The response text
            from_database: Whether the response came from the database
            is_identical: Whether the question matched exactly
            original_question: The original question if from database
            attempt: The attempt number (for regenerated responses)
        """
        if from_database:
            if is_identical:
                print(f"\nFound identical question in database.")
            else:
                print(f"\nAdapted response based on similar question:")
                if original_question:
                    print(f"Original question: {original_question}")
        else:
            if attempt == 1:
                print("\nResponse generated by LLM:")
            else:
                print(f"\nRegenerated response (attempt {attempt}):")
        
        self.blue_print("-" * 50)
        self.blue_print(response)
        self.blue_print("-" * 50)
        
        if from_database:
            if is_identical:
                print("\nThis is an exact match for your question!")
            else:
                print("\n ---> This response was adapted from a similar question.")
    
    def get_validation_feedback(self) -> bool:
        """
        Get validation feedback from the user.
        
        Returns:
            True if the response is valid, False otherwise
        """
        # self.blue_print("*** FEEDBACK NEEDED: Please evaluate the response above:")
        
        valid_input = None
        while valid_input is None:
            user_input = input("\nIs the response valid? (yes/no): ").lower().strip()
            if user_input in ["yes", "y"]:
                valid_input = True
            elif user_input in ["no", "n"]:
                valid_input = False
            else:
                print("Please answer with 'yes' or 'no'.")
        
        return valid_input
    
    def get_improvement_feedback(self) -> str:
        """
        Get feedback on how to improve the response.
        
        Returns:
            Feedback text
        """
        feedback = input("Please explain what needs to be improved: ")
        if not feedback.strip():
            feedback = "Response does not meet expectations. Please generate a new response."
        return feedback
    
    def get_additional_notes(self) -> str:
        """
        Get additional notes for a validated response.
        
        Returns:
            Notes text
        """
        return input("Would you like to add any observation to the response? (optional): ")
    
    def show_validation_success(self):
        """Display a success message for validated responses."""
        print("\n" + "=" * 50)
        print("SUCCESS: Response validated and stored!")
    
    def show_attempt_limit_warning(self):
        """Display a warning about reaching the attempt limit."""
        print("\n" + "=" * 50)
        print("WARNING: Attempt limit reached")
        print("=" * 50)
        print("After 3 attempts without validation, the flow will end.")
        print("=" * 50)
    
    def show_no_validation_message(self):
        """Display a message when ending without validation."""
        print("\n" + "=" * 50)
        print("ENDED: Flow completed without validation")
        print("=" * 50)
        print("After several attempts, we couldn't reach")
        print("a response that could be validated.")
        print("=" * 50)